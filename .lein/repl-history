(println "hello")
(println "hello") ;testing
;; testing
(str "test" "aaa")
(str 3 ​" "​ 2 ​" "​ 1 ​" Blast off!"​) 
(str 3 ​" "​ 2 ​" "​ 1 ​" Blast off!"​)
(str 1 2 3)
(str 1 "fewfew" 2 "jfkew")
(str 3 ​"few "​ 2 ​" "​ 1 ​" Blast off!"​)
(str 3 ​"few "​ 2 ​" "​ 1 ​"Blast off!"​)
(Str 3 " " 2 " " 1 " blast off!")
(str 3 " " 2 " " 1 " blast off!")
(count "fewfew"_
(count "fewfew")
(println true)
(str true)
(count "abc")
(count true)
(+ 25 121)
(+ 1 2)
(* 16 124)
(% 2)
(/ 4 2)
(/ 1 3232)
(/ 2 .2)
(/ 2 0.2)
(/ 2 0.5)
(/ 2 0.005)
(/ 0.1 0.005)
(/ 0.1 2)
(+ 32 39 34333  32 32 32)
(/ 25 5)
(/ 25 3)
(quot 25 5)
(quot 25 3)
(def name "fewfew")
(def myname "fewfew")
(str user/myname)
(str user)
(str user.name)
(str user/name)
(println user))
(println user)
(println user/name)
(def testing-number (+ 25 33 222))
(println testing-number)
(def testing-number 22)
(println testing-number)
(defn w [] (println "fewfew"))
(w)
(defn testing[]
( (+ 323 3232 (* 322 333 )))
)
(println testing)
(testing)
(defn testing[]
( (println (+ 323 3232 (* 322 333 ))))
)
(testing)
(​defn​ chatty-average [a b]
​   (println ​"chatty-average function called"​)
​   (println ​"** first argument:"​ a)
​   (println ​"** second argument:"​ b)
​   (/ (+ a b) 2.0))
(println *ns*)
(find-ns `user)
(find-ns user)
(find-ns 'user)
(find-ns "user")
(quote "feww")
(str "feww")
(quote 'feww)
'(1 2 3)
(println 'few)
(println "few")
(ns x)
(println "few")
(ns user)
(ns-map 'clojure.core)
(ex-info 3)
(count (ns-map 'clojure-core))
(count (ns-map 'clojure.core))
(keys (ns-map 'clojure.core))
(contains? (keys (ns-map 'clojure.core)) x)
(contains? x (keys (ns-map 'clojure.core)))
(keys (ns-map 'clojure.core)))
(keys (ns-map 'clojure.core))
(println not)
(str not)
(ns-map 'clojure.core.not)
(ns-map 'clojure.core/not)
(ns-map 'clojure.core)
(count 'fewfew)
(count "fewfew")
(def x "aa")
(= x 'aa)
(= x "aa")
(fnext "hello")
(fnext "ello")
(print fnext)
(seq (seq [​"Red Queen"​ ​"The Nightingale"​ ​"Uprooted"​]))
(seq (seq ["a" "b" "c"]))
(seq {})
(def x { })
(seq x)
(def x { :x "few" :c "fwww"})
(seq x)
(rest [1  2 3])
(seq (rest [1  2 3]))
(next (rest [1  2 3]))
(rest (next (rest [1  2 3])))
(boolean (rest (next (rest [1  2 3]))))
(length (rest (next (rest [1  2 3]))))
(count (rest (next (rest [1  2 3]))))
(boolean (count (rest (next (rest [1  2 3])))))
(= (count (rest (next (rest [1  2 3]))))) 0))
(= (count (rest (next (rest [1  2 3]))))) 0)
(= (count (rest (next (rest [1  2 3])))) 0)
(> (count (rest (next (rest [1  2 3])))) 0)
(sort [1 2 9 0])
(unsort [1 2 9 0])
(reverse [1 2 9 0])
(reverse (sort [1 2 9 0]))
(partition (reverse (sort [1 2 9 0])))
(partition 2 (reverse (sort [1 2 9 0])))
(partition 3 (reverse (sort [1 2 9 0])))
(partition 4 (reverse (sort [1 2 9 0])))
(def x [1 2 5 192])
(def doubled (map #(* 2 %) x))
doubled
(reduce + [1 2 3])
(reduce + {:w "3" :e 5})
(reduce + {:w 5 :e 5})
(reduce count( (keys { :a 3 :b 3})))
(reduce + count( (keys { :a 3 :b 3})))
(keys { :a 3 :b 3 })
(count (keys { :a 3 :b 3 }))
(re-seq #"\w" "ak fewklfj kleww ")
(re-seq #"\w+" "ak fewklfj kleww ")
#(+ % 5)
(def x #(+ % 5))
(x 5)
(x 100)
(repeat 5)
(def x (repeat 5))
(nth x 1000)
(take 20 x)
(def x (cycle [5 4 3]))
(take 10 x)
(def numbers (iterate inc 1))
(first numbers)
(nth 10 numbers)
(nth numbers 55)
(use 'xenodochial_sutherland.core)
(use 'xenodochial_sutherland/xenodochial_sutherland.core)
